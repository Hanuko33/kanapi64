#!/bin/bash
#
#  Copyright (c) 2012-2017 Jacek Danecki <jacek.m.danecki@gmail.com>
#
# This file is part of KaNaPi project
#
# KaNaPi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# KaNaPi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KaNaPi.  If not, see <http://www.gnu.org/licenses/>.

KANAPI_VERSION=0.9

PKG_ACTION="pkg_$1"
PAR2=$2
PAR3=$3

SF_URL=http://downloads.sourceforge.net/project/kanapi/packages/v${KANAPI_VERSION}
PKGS_LIST=packages.md5

download() {
#	wget $1 -O $2a
	echo "downloading $1"
	curl -L $1 -o $2
}

pkg_pull() {
	#arm i686 x86_64
	if [ -n "${PAR3}" ] 
	then
		PKG_ARCH=${PAR3}
	else
		PKG_ARCH=`uname -m`
	fi
	cd /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages
	echo "getting list of packages for ${PKG_ARCH}"
	download ${SF_URL}/${PKG_ARCH}/packages.md5 ${PKGS_LIST}
	echo "looking for ${PAR2} in ${PKG_ARCH}"
	PKGS=`grep ${PAR2} ${PKGS_LIST} | awk '{print $2}'`
	for p in ${PKGS}
	do
		echo "pulling $p"
		download ${SF_URL}/${PKG_ARCH}/$p $p
	done
}

pkg_pull_all() {
	#arm i686 x86_64
	if [ -n "${PAR2}" ] 
	then
		PKG_ARCH=${PAR2}
	else
		PKG_ARCH=`uname -m`
	fi
	cd /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages
	echo "getting list of packages for ${PKG_ARCH}"
	download ${SF_URL}/${PKG_ARCH}/packages.md5 ${PKGS_LIST}
	PKGS=`cat ${PKGS_LIST} | awk '{print $2}'`
	for p in ${PKGS}
	do
		echo "pulling $p"
		download ${SF_URL}/${PKG_ARCH}/$p $p
	done
}

pkg_search() {
	#arm i686 x86_64
	if [ -n "${PAR3}" ] 
	then
		PKG_ARCH=${PAR3}
	else
		PKG_ARCH=`uname -m`
	fi
	cd /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages
	if [ ! -f ${PKGS_LIST} ] 
	then
		echo "getting list of packages for ${PKG_ARCH}"
		download ${SF_URL}/${PKG_ARCH}/packages.md5 ${PKGS_LIST}
	fi
	echo "looking for ${PAR2}"
	PKGS=`grep ${PAR2} ${PKGS_LIST} | awk '{print $2}'`
	for p in ${PKGS}
	do
		echo "found: $p"
	done
}

pkg_list() {
	if [ -n "${PAR2}" ] 
	then
		PKG_ARCH=${PAR2}
	else
		PKG_ARCH=`uname -m`
	fi	
	cd /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages
	echo "getting list of packages for ${PKG_ARCH} to ${PKGS_LIST}"
	download ${SF_URL}/${PKG_ARCH}/packages.md5 ${PKGS_LIST}
}

pkg_check_all() {
	#arm i686 x86_64
	if [ -n "${PAR2}" ] 
	then
		PKG_ARCH=${PAR2}
	else
		PKG_ARCH=`uname -m`
	fi
	cd /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages
	echo "Checking packages with ${PKGS_LIST}"
	md5sum -w -c ${PKGS_LIST} 
	echo "Result: $?"
}

pkg_check() {
	#arm i686 x86_64
	if [ -n "${PAR3}" ] 
	then
		PKG_ARCH=${PAR3}
	else
		PKG_ARCH=`uname -m`
	fi
	cd /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages
	echo "looking for ${PAR2} for ${PKG_ARCH}"
	grep ${PAR2} ${PKGS_LIST} > ${PAR2}.md5
	md5sum -w -c ${PAR2}.md5
	rm ${PAR2}.md5
}

pkg_installed() {
	if [ -n "${PAR2}" ] 
	then
		PKG_ARCH=${PAR2}
	else
		PKG_ARCH=`uname -m`
	fi
	for i in /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages/*
	do 
		if [ -d $i ] 
		then
			pkg=`basename $i`
			if [ "$pkg" = "libs" -o "$pkg" = "etc" ] ; then continue; fi
			echo $pkg
		fi
	done
}

pkg_version() {
	#arm i686 x86_64
	if [ -n "${PAR3}" ] 
	then
		PKG_ARCH=${PAR3}
	else
		PKG_ARCH=`uname -m`
	fi
	PKGS=`ls /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages | grep ${PAR2}`
	FOUND=0
	if [ -n "$PKGS" ]
	then
		for p in ${PKGS}
		do
			. /kanapi_${KANAPI_VERSION}/${PKG_ARCH}/packages/${p}/kanapi.pkg
			if [ "$PACKAGE_NAME" = "${PAR2}" ]
			then
				echo "${PACKAGE_VER}"
				FOUND=1
			fi
		done
	fi
	if [ "$FOUND" = "1" ] 
	then 
		true
	else
		false
	fi
}

pkg_help() {
	echo "Usage for `basename $0`:"
	echo "pull package [ arm | i686 | x86_64 ]   - download package"
	echo "pull_all [ arm | i686 | x86_64 ]       - download all packages"
	echo "search package [ arm | i686 | x86_64 ] - search package"
	echo "list [ arm | i686 | x86_64 ]           - get list of packages"
	echo "check package [ arm | i686 | x86_64 ]  - check md5 sum of package"
	echo "check_all [ arm | i686 | x86_64 ]      - check md5 sum of all packages"
	echo "installed [ arm | i686 | x86_64 ]      - show installed packages"
	echo "version package [ arm | i686 | x86_64 ]- show version of installed package"
}

pkg_() {
	pkg_help
}

 
${PKG_ACTION}

