#set -x

export LANGUAGE="C"
export LC_ALL="C"
export LC_MESSAGES="C"
export LC_COLLATE="C"
export LC_CTYPE="C"
export LANG="C"

KANAPI_TARGET_NAME=${KANAPI_TARGET}-kanapi-linux-gnu
KANAPI_BUILD_NAME=`uname -m`-kanapi-linux-gnu
KANAPI_VER=`cat ../../scripts/KANAPI_VER`
KANAPI_BASE=/kanapi_${KANAPI_VER}/${KANAPI_TARGET}/packages
KANAPI_HOST_BASE=/kanapi_${KANAPI_VER}/`uname -m`/packages
KANAPI_CROSS_BASE=/kanapi_${KANAPI_VER}/`uname -m`/cross/${KANAPI_TARGET}
KANAPI_BUILD_SRC=/kanapi_build/src

##############################################################
if [ "${KANAPI_TARGET}" = "arm" ]
then
	KANAPI_TARGET_NAME=${KANAPI_TARGET_NAME}eabi
fi

. ../../../cross_compilers/scripts/config.kanapi
. ../../scripts/config.kanapi

PACKAGE_VER=${PACKAGE_NAME}-${VER}
PREFIX=${KANAPI_BASE}/${PACKAGE_VER}
PACKAGE_SRCDIR=${KANAPI_BUILD_SRC}/${PACKAGE_VER}
PACKAGE_FILENAME=${PACKAGE_VER}.${EXT}

if [[ ${URL} == "SF" ]]
then
	PACKAGE_LINK=http://downloads.sourceforge.net/project/${SF_URL}
else
	if [[ ${URL} == "GNU" ]]
	then
		PACKAGE_LINK=http://ftp.gnu.org/pub/gnu/${PACKAGE_NAME}/${PACKAGE_FILENAME}
	else
		PACKAGE_LINK=${URL}/${PACKAGE_FILENAME}
	fi
fi

export CROSS_GCC_PREFIX="${KANAPI_CROSS_BASE}/gcc-${gcc_ver}"
export CROSS_BINUTILS_PREFIX="${KANAPI_CROSS_BASE}/binutils-${binutils_ver}"

export LIBC_PREFIX="${KANAPI_BASE}/glibc-${glibc_ver}"

export PATH_BIN=${CROSS_BINUTILS_PREFIX}/bin
export PATH_GCC=${CROSS_GCC_PREFIX}/bin
export PATH=${PATH_BIN}:${PATH_GCC}:${PATH}

if [ "${KANAPI_TARGET}" = "`uname -m`" ]
then
	if [ -f ${KANAPI_BASE}/pkg-config-${pkg_config_ver}/bin/pkg-config ]
	then
		export PATH=/kanapi_${KANAPI_VER}/${KANAPI_TARGET}/bin:${PATH}
		KANAPI_PKGCONFIG=${KANAPI_BASE}/pkg-config-${pkg_config_ver}/bin/pkg-config
	fi
	KANAPI_CROSS=0
else 	
	KANAPI_CROSS=1
	if [ -f ${KANAPI_CROSS_BASE}/pkg-config-${pkg_config_ver}/bin/pkg-config ]
	then
		KANAPI_PKGCONFIG=${KANAPI_CROSS_BASE}/pkg-config-${pkg_config_ver}/bin/pkg-config
	fi
fi

export PKG_CONFIG=${KANAPI_PKGCONFIG}
export LD_LIBRARY_PATH=${KANAPI_CROSS_BASE}/gmp-${gmp_ver}/lib:${KANAPI_CROSS_BASE}/mpfr-${mpfr_ver}/lib:${KANAPI_CROSS_BASE}/mpc-${mpc_ver}/lib

if [ -n "${KANAPI_PKGCONFIG}" ]
then
	export PKGCONFIG_DIR=${KANAPI_BASE}/pkg-config-${pkg_config_ver}/share/pkgconfig
	if [[ -n ${LIB_DEPENDS} ]]
	then
		${KANAPI_PKGCONFIG} --exists ${LIB_DEPENDS}
		if [ "$?" = "0" ]
		then
			export LDFLAGS=`${KANAPI_PKGCONFIG} --libs ${LIB_DEPENDS}`
			export LD_LIBRARY_PATH=`${KANAPI_PKGCONFIG} --variable=libdir ${LIB_DEPENDS} | sed "s/ /:/g"`:${LD_LIBRARY_PATH}
			export CFLAGS=`${KANAPI_PKGCONFIG} --cflags ${LIB_DEPENDS}`
		fi
	fi
else
	if [ -d ${KANAPI_BASE}/glib-${glib_ver} ]
	then
		export GLIB_CFLAGS="-I${KANAPI_BASE}/glib-${glib_ver}/include -I${KANAPI_BASE}/glib-${glib_ver}/include/glib-2.0 -I${KANAPI_BASE}/glib-${glib_ver}/lib/glib-2.0/include"
		export GLIB_LIBS="-L${KANAPI_BASE}/glib-${glib_ver}/lib -lglib-2.0 -lgmodule-2.0"
	fi
fi

if [ -f ${KANAPI_BASE}/ncurses-${ncurses_ver}/bin/ncurses6-config ]
then
	NCURSES_CONFIG=${KANAPI_BASE}/ncurses-${ncurses_ver}/bin/ncurses6-config
	NCURSES_CFLAGS=`${NCURSES_CONFIG} --cflags`
	NCURSES_LDFLAGS=`${NCURSES_CONFIG} --libs`
fi

if [ -f ${KANAPI_BASE}/libgpg-error-${libgpg_error_ver}/bin/gpg-error-config ]
then
	GPG_ERROR_CONFIG=${KANAPI_BASE}/libgpg-error-${libgpg_error_ver}/bin/gpg-error-config
	GPG_ERROR_CFLAGS=`${GPG_ERROR_CONFIG} --cflags`
	GPG_ERROR_LDFLAGS=`${GPG_ERROR_CONFIG} --libs`
fi

if [ -f ${KANAPI_BASE}/libgcrypt-${libgcrypt_ver}/bin/libgcrypt-config ]
then
	LIBGCRYPT_CONFIG=${KANAPI_BASE}/libgcrypt-${libgcrypt_ver}/bin/libgcrypt-config
	LIBGCRYPT_CFLAGS=`${LIBGCRYPT_CONFIG} --cflags`
	LIBGCRYPT_LDFLAGS=`${LIBGCRYPT_CONFIG} --libs`
fi

if [ "${KANAPI_TARGET}" = "x86_64" ]
then
	CFLAGS="${CFLAGS} -fPIC"
fi

NR_CPUS=`cat /proc/cpuinfo | grep processor | wc -l`
MAKE_JOBS=${NR_CPUS}

local_copy() {
	rm -rf build
	cp -ar ${PACKAGE_SRCDIR} build
	cd build
}

pkg_wget() {
	if [ -s ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "downloading ${PACKAGE_NAME}"
		wget ${PACKAGE_LINK} -O ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
	fi
}

pkg_curl() {
	if [ -s ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "downloading ${PACKAGE_NAME}"
		if [ "`lsb_release -is`" = "KaNaPi" ]
		then 
			CURL_CA_BUNDLE=/kanapi_packages/config/cert/certificates.kanapi curl -L ${PACKAGE_LINK} -o ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
		else
			curl -L ${PACKAGE_LINK} -o ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME}
		fi
	fi
}

pkg_download() {
	pkg_curl
}

pkg_git_clone() {
	if [ -d ${KANAPI_BUILD_SRC}/${PACKAGE_NAME}-${VER} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		git clone ${URL}/${PACKAGE_NAME} ${PACKAGE_SRCDIR}
	fi
}

pkg_git_checkout() {
	cd ${PACKAGE_SRCDIR}
	git checkout -f ${VER}
}

pkg_copy() {
	mkdir ${KANAPI_BUILD_SRC}/${PACKAGE_VER}
	cp -v ${KANAPI_BUILD_SRC}/${PACKAGE_NAME} ${KANAPI_BUILD_SRC}/${PACKAGE_VER}/${PACKAGE_NAME}
}

pkg_tar_gz() {
	 tar -xzf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_tgz() {
	 tar -xzf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_tar_xz() {
	 tar -xJf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_tar_bz2() {
	 tar -xjf ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -C ${KANAPI_BUILD_SRC}
} 

pkg_zip() {
	 unzip ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -o -d ${KANAPI_BUILD_SRC}
} 

pkg_bz2() {
	mkdir ${KANAPI_BUILD_SRC}/${PACKAGE_VER}
	bzip2 -d ${KANAPI_BUILD_SRC}/${PACKAGE_FILENAME} -c > ${KANAPI_BUILD_SRC}/${PACKAGE_VER}/${PACKAGE_NAME}
}

pkg_version() {
	echo ${PACKAGE_VER}
}

pkg_configure_native() {
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX
}

pkg_configure_target() {	
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX --host=${KANAPI_TARGET_NAME} 
}

pkg_configure() {
	pkg_configure_target
}

pkg_build() {
	make -j ${MAKE_JOBS} MAKEINFO=true
}

pkg_install_make() {
	make -j ${MAKE_JOBS} install MAKEINFO=true
}

pkg_install() {
	pkg_install_make
}	

pkg_install_pc() {	
	pkg_install_make
	ln -svf ${PREFIX}/lib/pkgconfig/${PACKAGE_NAME}.pc ${PKGCONFIG_DIR}/${PACKAGE_NAME}.pc
}

pkg_install_pc_share() {	
	pkg_install_make
	ln -svf ${PREFIX}/share/pkgconfig/${PACKAGE_NAME}.pc ${PKGCONFIG_DIR}/${PACKAGE_NAME}.pc
}
	
pkg_install_pc_all() {
	pkg_install_make
	for i in ${PREFIX}/lib/pkgconfig/*
	do
		if [ -f $i ]
		then
			ln -svf $i ${PKGCONFIG_DIR}/`basename $i`
		fi
	done
}

pkg_uninstall() {
	if [ -d ${PREFIX} ]
	then	
		rm -rf /kanapi_${KANAPI_VER}/${KANAPI_TARGET}/packages/${PACKAGE_VER}
	fi
}

pkg_rebuild() {
	pkg_prepare
	pkg_configure
	pkg_build
}

pkg_clean() {
	echo "*** cleaning ${PACKAGE_VER} ***"
	cd .. ; if [ -d ${PACKAGE_VER} ] ; then rm -rf ${PACKAGE_VER} ; fi
}

pkg_package() {
	pkg_download
	pkg_prepare
	pkg_configure
	pkg_build
}

pkg_install_bin() {
	ln -svf ${PREFIX}/bin/${PACKAGE_NAME} ${KANAPI_BASE}/../bin/${PACKAGE_NAME}
}

pkg_install_bin_all() {
	ln -svf ${PREFIX}/bin/* ${KANAPI_BASE}/../bin
}

pkg_install_sbin_all() {
	ln -svf ${PREFIX}/sbin/* ${KANAPI_BASE}/../bin
}

pkg_install_libs() {
	for f in ${PREFIX}/lib/lib*.so* ${PREFIX}/lib/lib*.a 
	do
		if [ -f $f ] 
		then
			ln -svf $f ${KANAPI_BASE}/libs/`basename $f`
		fi
	done
	export LD_LIBRARY_PATH=
	ldconfig
}

pkg_install_all() {
	pkg_install_pc
	pkg_install_libs
	pkg_install_bin
}

pkg_test() {
	echo "tests for ${PACKAGE_NAME}"
	make -C ../../tests test_${PACKAGE_NAME} KANAPI_TARGET_NAME=${KANAPI_TARGET_NAME} KANAPI_BASE=${KANAPI_BASE}
}

pkg_check() {
	echo "!!! Add your tests in ${PACKAGE_NAME}.kanapi file !!!"
}

