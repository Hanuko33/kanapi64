export LANGUAGE="C"
export LC_ALL="C"
export LC_MESSAGES="C"
export LC_COLLATE="C"
export LC_CTYPE="C"
export LANG="C"

KANAPI_TARGET_NAME=${KANAPI_TARGET}-kanapi-linux-gnu
KANAPI_VER=0.6
KANAPI_BASE=/kanapi_${KANAPI_VER}/${KANAPI_TARGET}/packages
KANAPI_CROSS_BASE=/kanapi_${KANAPI_VER}/`uname -m`/cross/${KANAPI_TARGET}

##############################################################
if [ "${KANAPI_TARGET}" = "arm" ]
then
	KANAPI_TARGET_NAME=${KANAPI_TARGET_NAME}eabi
fi

. ../../../cross_compilers/scripts/config.kanapi
. ../../scripts/config.kanapi

PACKAGE_VER=${PACKAGE_NAME}-${VER}
PREFIX=${KANAPI_BASE}/${PACKAGE_VER}
PACKAGE_SRCDIR=/kanapi_build/src/${PACKAGE_VER}
PACKAGE_FILENAME=${PACKAGE_VER}.${EXT}
if [[ ${URL} == "SF" ]]
then
PACKAGE_LINK=http://downloads.sourceforge.net/project/${SF_URL}
else
PACKAGE_LINK=${URL}/${PACKAGE_FILENAME}
fi

export CROSS_GCC_PREFIX="${KANAPI_CROSS_BASE}/gcc-${gcc_ver}"
export CROSS_BINUTILS_PREFIX="${KANAPI_CROSS_BASE}/binutils-${binutils_ver}"
export CROSS_LIBC_PREFIX="${KANAPI_CROSS_BASE}/glibc-${glibc_ver}"

export LIBC_PREFIX="${KANAPI_BASE}/glibc-${glibc_ver}"

#export CPP="/bin/cpp"

#export PKGCONFIG_DIR=${KANAPI_BASE}/pkg-config-0.29/share/pkgconfig

#if [[ -n ${LIB_DEPENDS} ]]
#then
#	export LDFLAGS=`pkg-config --libs ${LIB_DEPENDS}`
#	export LD_LIBRARY_PATH=`pkg-config --variable=libdir ${LIB_DEPENDS} | sed "s/ /:/g"`
#	export CFLAGS=`pkg-config --cflags ${LIB_DEPENDS}`
#fi

MAKE_JOBS=4

export LIBRARIES_PATH=${KANAPI_CROSS_BASE}/gmp-${gmp_ver}/lib:${KANAPI_CROSS_BASE}/mpfr-${mpfr_ver}/lib:${KANAPI_CROSS_BASE}/mpc-${mpc_ver}/lib
if [ -n "${LD_LIBRARY_PATH}" ]
then
		export LD_LIBRARY_PATH=${LIBRARIES_PATH}:${LD_LIBRARY_PATH}
else
		export LD_LIBRARY_PATH=${LIBRARIES_PATH}
fi

export PATH_BIN=${CROSS_BINUTILS_PREFIX}/bin
export PATH_GCC=${CROSS_GCC_PREFIX}/bin
export PATH=${PATH_BIN}:${PATH_GCC}:${PATH}

local_copy() {
	rm -rf build
	cp -ar ../../src/${PACKAGE_VER} build
	cd build
}

pkg_download() {
	if [ -s /kanapi_build/src/${PACKAGE_FILENAME} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "downloading ${PACKAGE_NAME}"
		wget ${PACKAGE_LINK} -O /kanapi_build/src/${PACKAGE_FILENAME}
	fi
}

pkg_curl() {
	if [ -s /kanapi_build/src/${PACKAGE_FILENAME} ] 
	then 
		echo "$PACKAGE_NAME: already downloaded"
	else
		echo "downloading ${PACKAGE_NAME}"
		CURL_CA_BUNDLE=/kanapi_packages/config/cert/certificates.kanapi curl ${PACKAGE_LINK} -o /kanapi_build/src/${PACKAGE_FILENAME}
	fi
}

pkg_copy() {
	mkdir /kanapi_build/src/${PACKAGE_VER}
	cp -v /kanapi_build/src/${PACKAGE_NAME} /kanapi_build/src/${PACKAGE_VER}/${PACKAGE_NAME}
}

pkg_tar_gz() {
	 tar -xzf /kanapi_build/src/${PACKAGE_FILENAME} -C /kanapi_build/src
} 

pkg_tgz() {
	 tar -xzf /kanapi_build/src/${PACKAGE_FILENAME} -C /kanapi_build/src
} 

pkg_tar_xz() {
	 tar -xJf /kanapi_build/src/${PACKAGE_FILENAME} -C /kanapi_build/src
} 

pkg_tar_bz2() {
	 tar -xjf /kanapi_build/src/${PACKAGE_FILENAME} -C /kanapi_build/src
} 

pkg_version() {
	echo ${PACKAGE_VER}
}

pkg_configure() {
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX
}

pkg_configure_target() {	
	${PACKAGE_SRCDIR}/configure --prefix=$PREFIX --host=${KANAPI_TARGET_NAME} 
}

pkg_build() {
	make -j ${MAKE_JOBS} MAKEINFO=true
}

pkg_install_make() {
	make -j ${MAKE_JOBS} install MAKEINFO=true
}

pkg_install() {
	pkg_install_make
}	

pkg_install_pc() {	
	pkg_install_make
	ln -svf ${PREFIX}/lib/pkgconfig/${PACKAGE_NAME}.pc ${PKGCONFIG_DIR}/${PACKAGE_NAME}.pc
}

pkg_install_pc_share() {	
	pkg_install_make
	ln -svf ${PREFIX}/share/pkgconfig/${PACKAGE_NAME}.pc ${PKGCONFIG_DIR}/${PACKAGE_NAME}.pc
}
	
pkg_install_pc_all() {
	pkg_install_make
	for i in ${PREFIX}/lib/pkgconfig/*
	do
		ln -svf $i ${PKGCONFIG_DIR}/`basename $i`
	done
}

pkg_rebuild() {
	pkg_prepare
	pkg_configure
	pkg_build
}

pkg_clean() {
	echo "*** cleaning ${PACKAGE_VER} ***"
	cd .. ; rm -rf ${PACKAGE_VER}
}

pkg_package() {
	pkg_download
	pkg_prepare
	pkg_configure
	pkg_build
}

pkg_install_bin() {
	ln -svf ${PREFIX}/bin/${PACKAGE_NAME} /bin64/${PACKAGE_NAME}
}

pkg_test() {
	echo "tests for ${PACKAGE_NAME}"
	make -C ../../tests test_${PACKAGE_NAME} KANAPI_TARGET_NAME=${KANAPI_TARGET_NAME} KANAPI_BASE=${KANAPI_BASE}
}

