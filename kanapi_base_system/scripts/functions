#!/bin/bash
#
# Copyright (c) 2012 Jacek Danecki <jacek.m.danecki@gmail.com>
#
# This file is part of KaNaPi project
#
# KaNaPi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# KaNaPi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with KaNaPi.  If not, see <http://www.gnu.org/licenses/>.

BUILD_SRC_DIR=../../kanapi_system/kanapi_build/src
BUILD_OUT_DIR=../../kanapi_system/kanapi_build/out

prepare() {
	echo "prepare: $1"
	rm -rf $BUILD_SRC_DIR/$1
	rm -rf $BUILD_OUT_DIR/$1
	cp -ar ../../../sources/$1 $BUILD_SRC_DIR
	mkdir $BUILD_OUT_DIR/$1
	cp $1.compile $BUILD_OUT_DIR/$1
}

prepare_release_tgz() {
	echo "prepare: $1"
	rm -rf $BUILD_SRC_DIR/$1
	rm -rf $BUILD_OUT_DIR/$1
	cp -ar ../../../sources/RELEASES/$1.tar.gz $BUILD_SRC_DIR
	tar -xzf $BUILD_SRC_DIR/$1.tar.gz -C $BUILD_SRC_DIR
	mkdir $BUILD_OUT_DIR/$1
	cp $1.compile $BUILD_OUT_DIR/$1
}

prepare_release_zip() {
	echo "prepare: $1"
	rm -rf $BUILD_SRC_DIR/$1
	rm -rf $BUILD_OUT_DIR/$1
	cp -ar ../../../sources/RELEASES/$1.zip $BUILD_SRC_DIR
	unzip  $BUILD_SRC_DIR/$1.zip -d $BUILD_SRC_DIR
	mkdir $BUILD_OUT_DIR/$1
	cp $1.compile $BUILD_OUT_DIR/$1
}

prepare_release_tbz() {
	echo "prepare: $1"
	rm -rf $BUILD_SRC_DIR/$1
	rm -rf $BUILD_OUT_DIR/$1
	cp -ar ../../../sources/RELEASES/$1.tar.bz2 $BUILD_SRC_DIR
	tar -xjf $BUILD_SRC_DIR/$1.tar.bz2 -C $BUILD_SRC_DIR
	mkdir $BUILD_OUT_DIR/$1
	cp $1.compile $BUILD_OUT_DIR/$1
}

prepare_release_xz() {
	echo "prepare: $1"
	rm -rf $BUILD_SRC_DIR/$1
	rm -rf $BUILD_OUT_DIR/$1
	cp -ar ../../../sources/RELEASES/$1.tar.xz $BUILD_SRC_DIR
	tar -xJf $BUILD_SRC_DIR/$1.tar.xz -C $BUILD_SRC_DIR
	mkdir $BUILD_OUT_DIR/$1
	cp $1.compile $BUILD_OUT_DIR/$1
}
apply_patch() {
#	echo "apply_patch $1 $2"
	cp -v $2 $BUILD_OUT_DIR/$1
#	echo -n "Entering: "
	pushd $BUILD_SRC_DIR/$1
	patch -p1 < ../../out/$1/$2
#	echo -n "Returning: "
	popd
}

apply_patch_p0() {
#	echo "apply_patch $1 $2"
	cp -v $2 $BUILD_OUT_DIR/$1
#	echo -n "Entering: "
	pushd $BUILD_SRC_DIR/$1
	patch -p0 < ../../out/$1/$2
#	echo -n "Returning: "
	popd
}
copy_file() {
	cp -v $2 $BUILD_OUT_DIR/$1
}

